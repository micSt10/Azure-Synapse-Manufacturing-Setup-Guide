{
   "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {
     "environment_code": {
       "type": "String",
       "metadata": {
         "description": "Suffix added to all resource name to make them unique. Should consist of only lower case alphabet and numbers. Total length should be less than 6 characters."
       }
     },
     "sql_administrator_login_password": {
       "type": "SecureString",
       "metadata": {
         "description": "Password for SQL Admin. Should have atleast one capital, one small alphapbet with one digit and one special character.Password should be at least 8 characters long."
       }
     },
     "pbi_workspace_id": {
       "type": "String",
       "metadata": {
         "description": "PowerBi workspace Id."
       }
     },
     "location": {
       "type": "string",
       "defaultValue": "[resourceGroup().location]",
       "allowedValues": [
         "westus2",
         "eastus",
         "northeurope",
         "westeurope",
         "southeastasia",
         "australiaeast",
         "westcentralus"
       ],
       "metadata": {
         "description": "Location for all resources."
       }
     }
   },
   "variables": {
     "resource_group_name": "[resourceGroup().name]",
     "unique_suffix": "[concat(uniqueString(deployment().name), '-', parameters('environment_code'))]",
     "location": "[parameters('location')]",
     "search_name": "[concat('search-',variables('unique_suffix'))]",
     "key_vault_name": "[concat('kv-',variables('unique_suffix'))]",
     "cosmos_database_container_name_historical_data": "historical-data",
     "cosmos_database_container_name_historical_data_adf": "historical-data-adf",
     "cosmos_account_name_mfgdemo": "[if(greater(length(concat('cosmosdb-mfgdemo-', uniqueString(deployment().name),parameters('environment_code'))), 43), substring(concat('cosmosdb-mfgdemo-', uniqueString(deployment().name),parameters('environment_code')),0,43) , concat('cosmosdb-mfgdemo-', uniqueString(deployment().name),parameters('environment_code')) )]",
     "cosmos_database_name_mfgdemo_industrial": "industrial",
     "cosmos_database_name_mfgdemo_manufacturing": "manufacturing",
     "cosmos_database_container_name_MfgMesQuality": "MfgMesQuality",
     "cosmos_database_container_name_MfgMachineInstance": "MfgMachineInstance",
     "cosmos_database_container_name_MfgMachineMake": "MfgMachineMake",
     "cosmos_database_container_name_historical": "historical",
     "cosmos_database_container_name_anomalies": "anomalies",
     "cosmos_database_container_name_AggMfgMesQuality": "AggMfgMesQuality",
     "cosmos_database_container_name_manufacturing_data": "manufacturing-data",
     "cosmos_database_container_name_mfg_mes_quality1": "mfg-mes-quality1",
     "cosmos_database_container_name_htap-hvac": "htap-hvac",
     "cosmos_database_container_name_mfg_quality": "mfg-quality",
     "cosmos_database_container_name_spark_streaming": "spark-streaming",
     "cosmos_database_container_name_manufacturing_analytical_store": "manufacturing-analytical-store",
     "cosmos_database_container_name_mfg_mes_quality": "mfg-mes-quality",
     "iot_hub_name_mfgiothub": "[concat('mfgiothub-',variables('unique_suffix'))]",
     "iot_hub_name_mfgiothubCosmosDB": "[concat('mfgiothubCosmosDB-',variables('unique_suffix'))]",
     "iot_hub_name_mfgIotHubTelemetry": "[concat('mfgIotHubTelemetry-',variables('unique_suffix'))]",
     "iot_hub_name_raceCarIotHub": "[concat('raceCarIotHub-',variables('unique_suffix'))]",
     "iot_hub_consumer_group_mfgiothub": "cg-mfgiothub",
     "iot_hub_consumer_group_mfgiothubCosmosDB": "cg-mfgiothubCosmosDB",
     "iot_hub_consumer_group_mfgIotHubTelemetry": "cg-mfgIotHubTelemetry",
     "iot_hub_consumer_group_raceCarIotHub": "cg-raceCarIotHub",
     "storage_account_name_dreamdemostorageforgen2": "[if(greater(length(concat('dreamdemostrggen2', parameters('environment_code'),uniqueString(deployment().name))), 24), substring(concat('dreamdemostrggen2',parameters('environment_code'),uniqueString(deployment().name)),0,24) , concat('dreamdemostrggen2',parameters('environment_code'),uniqueString(deployment().name)) )]",
     "asa_name_mfgasa": "[concat('mfgasa-',variables('unique_suffix'))]",
     "asa_query_mfgasa": "WITH CleanedRecord AS ( SELECT udf.removeIoTHubField([mfg-iothub-in]) AS CleanedField FROM [mfg-iothub-in] )   \n SELECT CleanedField.EpochTime, CleanedField.StringDateTime, CleanedField.JobCode, CleanedField.OperationId, CleanedField.BatchCode, CleanedField.MachineCode, CleanedField.VibrationX, CleanedField.VibrationY, CleanedField.VibrationZ, CleanedField.XAxis, CleanedField.YAxis, CleanedField.ZAxis, CleanedField.SpindleSpeed, CleanedField.AnomalyTemperature, CleanedField.CoolantTemperature, CleanedField.EventProcessedUtcTime, CleanedField.PartitionId, CleanedField.EventEnqueuedUtcTime INTO [synapse-mfgiotmillingcanning] FROM CleanedRecord WHERE CleanedField.OperationId = 103  \n SELECT mfgiothub.EpochTime, mfgiothub.StringDateTime, mfgiothub.JobCode, mfgiothub.OperationId, mfgiothub.BatchCode, mfgiothub.MachineCode, mfgiothub.VibrationX, mfgiothub.VibrationY, mfgiothub.VibrationZ, mfgiothub.XAxis, mfgiothub.YAxis, mfgiothub.ZAxis, mfgiothub.SpindleSpeed, mfgiothub.AnomalyTemperature, mfgiothub.CoolantTemperature, mfgiothub.EventProcessedUtcTime, mfgiothub.PartitionId, mfgiothub.EventEnqueuedUtcTime INTO [powerbi-milling-canning] FROM [mfgiothub]  \n SELECT mfgiothub.* INTO [storage-lathe-thread-cut] FROM  [mfgiothub] WHERE mfgiothub.OperationId = 101  \n SELECT  mfgiothub.* INTO  [storage-lathe-peck-drill] FROM mfgiothub WHERE mfgiothub.OperationId = 102  \n SELECT mfgiothub.EpochTime, mfgiothub.StringDateTime, mfgiothub.JobCode, mfgiothub.OperationId, mfgiothub.BatchCode, mfgiothub.MachineCode, mfgiothub.VibrationX, mfgiothub.VibrationY, mfgiothub.VibrationZ, mfgiothub.XAxis, mfgiothub.YAxis, mfgiothub.ZAxis, mfgiothub.SpindleSpeed, mfgiothub.AnomalyTemperature, mfgiothub.CoolantTemperature, mfgiothub.EventProcessedUtcTime, mfgiothub.PartitionId, mfgiothub.EventEnqueuedUtcTime INTO [storage-milling-canning] FROM mfgiothub WHERE mfgiothub.OperationId = 10",
     "asa_name_mfgasaCosmosDB": "[concat('mfgasaCosmosDB-',variables('unique_suffix'))]",
     "asa_query_mfgasaCosmosDB": "SELECT * INTO [cosmosdboutput] FROM [mfgasaCosmosDB] \n SELECT * INTO [cosmosdboutputNoHTAP] FROM [mfgasaCosmosDB]",
     "asa_name_mfgASATelemetry": "[concat('mfgASATelemetry-',variables('unique_suffix'))]",
     "asa_query_mfgASATelemetry": "SELECT * INTO [mfgStorageTelemetry-out] FROM [mfgIoTHubTelemetry-in]",
     "asa_name_race_car_asa": "[concat('race-car-asa-',variables('unique_suffix'))]",
     "asa_query_race_car_asa": "SELECT * INTO [power-bi] FROM [race-car]",
     "rbac_guid_owner": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
     "workspace_name_dreamdemosynapse": "[concat('manufacturingdemo',parameters('environment_code'),uniqueString(deployment().name))]",
     "default_data_lake_storage_file_system_name": "tempdata",
     "default_data_lake_storage_account_url": "[concat('https://', variables('storage_account_name_dreamdemostorageforgen2'), '.dfs.core.windows.net')]",
     "sql_compute_name": "ManufacturingDW",
     "sql_administrator_login_id": "ManufacturingUser",
     "spark_compute_name": "MFGDreamPool",
     "sql_server_sku": "DW500c",
     "spark_auto_scale_enabled": "true",
     "spark_min_node_count": "3",
     "spark_max_node_count": "4",
     "spark_node_count": "1",
     "spark_node_size_family": "MemoryOptimized",
     "spark_node_size": "Small",
     "spark_auto_pause_enabled": "true",
     "spark_auto_pause_delay_in_minutes": "15",
     "spark_version": "2.4",
     "packages_requirements_file_name": "requirements.txt",
     "packages_requirements_content": "seaborn==0.10.1\nxgboost==1.0.2\nonnxruntime==1.0.0\nwerkzeug==0.16.1\nnimbusml==1.7.1\nruamel.yaml==0.16.9\nazureml-train-automl-runtime==1.6.0\nscikit-learn==0.20.3\nnumpy==1.16.2\npandas==0.23.4\nscipy==1.4.1",
     "storage_account_name_manufacturingdemo12": "[if(greater(length(concat('mfgdemo12',parameters('environment_code'), uniqueString(deployment().name))), 24),substring(concat('mfgdemo12', parameters('environment_code'), uniqueString(deployment().name)),0,24) , concat('mfgdemo12',parameters('environment_code'), uniqueString(deployment().name)) )]",
     "storage_account_name_manufacturingdemoassets": "[if(greater(length(concat('mfgdemoassets',parameters('environment_code'), uniqueString(deployment().name))), 24), substring(concat('mfgdemoassets',parameters('environment_code'), uniqueString(deployment().name)),0,24) , concat('mfgdemoassets',parameters('environment_code'), uniqueString(deployment().name)) )]",
     "storage_account_name_manufacturingwebstaging": "[if(greater(length(concat('mfgwebstaging',parameters('environment_code'), uniqueString(deployment().name))), 24), substring(concat('mfgwebstaging',parameters('environment_code'), uniqueString(deployment().name)),0,24) , concat('mfgwebstaging',parameters('environment_code'), uniqueString(deployment().name)) )]",
     "manufacturing_poc_ase_name": "[concat('manufacturing-poc-',variables('unique_suffix'))]",
     "manufacturing_poc_ai_name": "[concat('manufacturing-poc-',variables('unique_suffix'))]",
     "manufacturing_poc_app_service_name": "[concat('manufacturing-poc-',variables('unique_suffix'))]",
     "wideworldimporters_ase_name": "[concat('wideworldimporters-',variables('unique_suffix'))]",
     "wideworldimporters_ai_name": "[concat('wideworldimporters-',variables('unique_suffix'))]",
     "wideworldimporters_app_service_name": "[concat('wideworldimporters-',variables('unique_suffix'))]",
     "car_telemetry_ase_name": "[concat('car-telemetry-ase',variables('unique_suffix'))]",
     "car_telemetry_ai_name": "[concat('car-telemetry-ai-',variables('unique_suffix'))]",
     "car_telemetry_app_service_name": "[concat('car-telemetry-app-',variables('unique_suffix'))]",
     "sku2_telemetry_ase_name": "[concat('sku2-telemetry-ase-',variables('unique_suffix'))]",
     "sku2_telemetry_ai_name": "[concat('sku2-telemetry-ai-',variables('unique_suffix'))]",
     "sku2_telemetry_app_service_name": "[concat('sku2-telemetry-app-',variables('unique_suffix'))]",
     "sendtohub_telemetry_ase_name": "[concat('sendtohub-telemetry-ase-',variables('unique_suffix'))]",
     "sendtohub_telemetry_ai_name": "[concat('sendtohub-telemetry-ai-',variables('unique_suffix'))]",
     "sendtohub_telemetry_app_service_name": "[concat('sendtohub-telemetry-app-',variables('unique_suffix'))]",
     "data_gen_telemetry_ase_name": "[concat('datagen-telemetry-ase-',variables('unique_suffix'))]",
     "data_gen_telemetry_ai_name": "[concat('datagen-telemetry-ai-',variables('unique_suffix'))]",
     "data_gen_telemetry_app_service_name": "[concat('datagen-telemetry-app-',variables('unique_suffix'))]"
   },
   "resources": [
     {
       "type": "Microsoft.Resources/tags",
       "name": "default",
       "apiVersion": "2019-10-01",
       "dependsOn": [],
       "properties": {
         "tags": {
           "DeploymentId": "[parameters('environment_code')]",
           "UniqueId": "[uniqueString(deployment().name)]",
           "WsId": "[parameters('pbi_workspace_id')]"
         }
       }
     },
     {
       "name": "[toLower(variables('cosmos_account_name_mfgdemo'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts",
       "apiVersion": "2019-12-12",
       "location": "[variables('location')]",
       "kind": "GlobalDocumentDB",
       "properties": {
         "consistencyPolicy": {
           "defaultConsistencyLevel": "Eventual"
         },
         "locations": [
           {
             "locationName": "[variables('location')]"
           }
         ],
         "databaseAccountOfferType": "Standard",
         "enableAnalyticalStorage": true,
         "publicNetworkAccess": "Enabled"
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', toLower(variables('cosmos_database_name_mfgdemo_industrial')))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[concat('Microsoft.DocumentDB/databaseAccounts/', toLower(variables('cosmos_account_name_mfgdemo')))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_name_mfgdemo_industrial')]"
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', toLower(variables('cosmos_database_name_mfgdemo_manufacturing')))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[concat('Microsoft.DocumentDB/databaseAccounts/', toLower(variables('cosmos_account_name_mfgdemo')))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_name_mfgdemo_manufacturing')]"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_industrial'), '/', variables('cosmos_database_container_name_historical'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_industrial'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_historical')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_industrial'), '/', variables('cosmos_database_container_name_historical_data'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_industrial'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_historical_data')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_industrial'), '/', variables('cosmos_database_container_name_historical_data_adf'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_industrial'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_historical_data_adf')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_AggMfgMesQuality'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_AggMfgMesQuality')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_MfgMesQuality'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_MfgMesQuality')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_MfgMachineInstance'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_MfgMachineInstance')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_MfgMachineMake'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_MfgMachineMake')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_anomalies'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_anomalies')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_htap-hvac'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_htap-hvac')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_manufacturing_analytical_store'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_manufacturing_analytical_store')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_manufacturing_data'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_manufacturing_data')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_mfg_mes_quality'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_mfg_mes_quality')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_mfg_mes_quality1'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_mfg_mes_quality1')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_mfg_quality'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_mfg_quality')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[concat(variables('cosmos_account_name_mfgdemo'), '/', variables('cosmos_database_name_mfgdemo_manufacturing'), '/', variables('cosmos_database_container_name_spark_streaming'))]",
       "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
       "apiVersion": "2019-12-12",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "properties": {
         "resource": {
           "id": "[variables('cosmos_database_container_name_spark_streaming')]",
           "indexingPolicy": {
             "indexingMode": "consistent",
             "automatic": true,
             "includedPaths": [
               {
                 "path": "/*"
               }
             ],
             "excludedPaths": [
               {
                 "path": "/\"_etag\"/?"
               }
             ]
           },
           "partitionKey": {
             "paths": [
               "/SyntheticPartitionKey"
             ],
             "kind": "Hash"
           },
           "analyticalStorageTtl": -1,
           "conflictResolutionPolicy": {
             "mode": "LastWriterWins",
             "conflictResolutionPath": "/_ts"
           }
         },
         "options": {
           "throughput": "400"
         }
       }
     },
     {
       "name": "[variables('iot_hub_name_mfgiothub')]",
       "type": "Microsoft.Devices/IotHubs",
       "apiVersion": "2019-03-22",
       "location": "[variables('location')]",
       "sku": {
         "name": "S1",
         "tier": "Standard",
         "capacity": 1
       },
       "properties": {
         "eventHubEndpoints": {
           "events": {
             "retentionTimeInDays": 1,
             "partitionCount": 4
           }
         },
         "features": "None"
       }
     },
     {
       "type": "Microsoft.Devices/IotHubs/eventHubEndpoints/ConsumerGroups",
       "apiVersion": "2019-03-22",
       "name": "[concat(variables('iot_hub_name_mfgiothub'), '/events/', variables('iot_hub_consumer_group_mfgiothub'))]",
       "dependsOn": [
         "[concat('Microsoft.Devices/IotHubs/', variables('iot_hub_name_mfgiothub'))]"
       ]
     },
     {
       "name": "[variables('iot_hub_name_mfgIotHubTelemetry')]",
       "type": "Microsoft.Devices/IotHubs",
       "apiVersion": "2019-03-22",
       "location": "[variables('location')]",
       "sku": {
         "name": "S1",
         "tier": "Standard",
         "capacity": 1
       },
       "properties": {
         "eventHubEndpoints": {
           "events": {
             "retentionTimeInDays": 1,
             "partitionCount": 4
           }
         },
         "features": "None"
       }
     },
     {
       "type": "Microsoft.Devices/IotHubs/eventHubEndpoints/ConsumerGroups",
       "apiVersion": "2019-03-22",
       "name": "[concat(variables('iot_hub_name_mfgIotHubTelemetry'), '/events/', variables('iot_hub_consumer_group_mfgIotHubTelemetry'))]",
       "dependsOn": [
         "[concat('Microsoft.Devices/IotHubs/', variables('iot_hub_name_mfgIotHubTelemetry'))]"
       ]
     },
     {
       "name": "[variables('iot_hub_name_raceCarIotHub')]",
       "type": "Microsoft.Devices/IotHubs",
       "apiVersion": "2019-03-22",
       "location": "[variables('location')]",
       "sku": {
         "name": "S1",
         "tier": "Standard",
         "capacity": 1
       },
       "properties": {
         "eventHubEndpoints": {
           "events": {
             "retentionTimeInDays": 1,
             "partitionCount": 4
           }
         },
         "features": "None"
       }
     },
     {
       "type": "Microsoft.Devices/IotHubs/eventHubEndpoints/ConsumerGroups",
       "apiVersion": "2019-03-22",
       "name": "[concat(variables('iot_hub_name_raceCarIotHub'), '/events/', variables('iot_hub_consumer_group_raceCarIotHub'))]",
       "dependsOn": [
         "[concat('Microsoft.Devices/IotHubs/', variables('iot_hub_name_raceCarIotHub'))]"
       ]
     },
     {
       "name": "[variables('iot_hub_name_mfgiothubCosmosDB')]",
       "type": "Microsoft.Devices/IotHubs",
       "apiVersion": "2019-03-22",
       "location": "[variables('location')]",
       "sku": {
         "name": "S1",
         "tier": "Standard",
         "capacity": 1
       },
       "properties": {
         "eventHubEndpoints": {
           "events": {
             "retentionTimeInDays": 1,
             "partitionCount": 4
           }
         },
         "features": "None"
       }
     },
     {
       "type": "Microsoft.Devices/IotHubs/eventHubEndpoints/ConsumerGroups",
       "apiVersion": "2019-03-22",
       "name": "[concat(variables('iot_hub_name_mfgiothubCosmosDB'), '/events/', variables('iot_hub_consumer_group_mfgiothubCosmosDB'))]",
       "dependsOn": [
         "[concat('Microsoft.Devices/IotHubs/', variables('iot_hub_name_mfgiothubCosmosDB'))]"
       ]
     },
     {
       "type": "Microsoft.Storage/storageAccounts",
       "apiVersion": "2019-04-01",
       "name": "[variables('storage_account_name_dreamdemostorageforgen2')]",
       "location": "[variables('location')]",
       "sku": {
         "name": "Standard_LRS"
       },
       "kind": "StorageV2",
       "properties": {
         "accessTier": "Hot",
         "supportsHttpsTrafficOnly": "true",
         "isHnsEnabled": "true",
         "largeFileSharesState": "Disabled"
       },
       "resources": [
         {
           "type": "blobServices/containers",
           "apiVersion": "2018-07-01",
           "name": "[concat('default/', variables('default_data_lake_storage_file_system_name'))]",
           "dependsOn": [
             "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name_dreamdemostorageforgen2'))]"
           ]
         }
       ]
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "sku": {
         "name": "Standard_LRS",
         "tier": "Standard"
       },
       "properties": {
         "cors": {
           "corsRules": [
 
           ]
         },
         "deleteRetentionPolicy": {
           "enabled": false
         }
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/mfgtelemetry')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/campaigndata')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/mfgoutputs')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/cosmosdb-demo')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/egstage')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "Container"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/webappassets')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "Container"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/marketingdb-staging')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/mfg-historical-data')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/mfg-iot-data')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/mfgcosmos')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/mfgdemodata')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/mfgtweets')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/nyctlc')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/saphana')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/staging')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/weather')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "None"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default/customcsv')]",
       "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name_dreamdemostorageforgen2'), 'default')]",
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "properties": {
         "publicAccess": "Container"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/fileServices",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_dreamdemostorageforgen2'), '/default')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "sku": {
         "name": "Standard_LRS",
         "tier": "Standard"
       },
       "properties": {
         "cors": {
           "corsRules": [
 
           ]
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs",
       "apiVersion": "2019-06-01",
       "name": "[variables('asa_name_mfgasa')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]",
         "[concat('Microsoft.Synapse/workspaces/', variables('workspace_name_dreamdemosynapse'))]"
       ],
       "location": "northeurope",
       "identity": {
         "type": "SystemAssigned"
       },
       "properties": {
         "sku": {
           "name": "Standard"
         },
         "eventsOutOfOrderPolicy": "Adjust",
         "outputErrorPolicy": "Stop",
         "eventsOutOfOrderMaxDelayInSeconds": 0,
         "eventsLateArrivalMaxDelayInSeconds": 5,
         "dataLocale": "en-US"
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/inputs",
       "apiVersion": "2016-03-01",
       "name": "[concat(variables('asa_name_mfgasa'), '/mfg-iothub-in')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]",
         "[concat('Microsoft.Devices/IotHubs/', variables('iot_hub_name_mfgiothub'))]"
       ],
       "properties": {
         "type": "Stream",
         "datasource": {
           "type": "Microsoft.Devices/IotHubs",
           "properties": {
             "iotHubNamespace": "[variables('iot_hub_name_mfgiothub')]",
             "sharedAccessPolicyName": "iothubowner",
             "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iot_hub_name_mfgiothub')), '2018-04-01').value[0].primaryKey]",
             "consumerGroupName": "[variables('iot_hub_consumer_group_mfgiothub')]",
             "endpoint": "messages/events"
           }
         },
         "serialization": {
           "type": "Json",
           "properties": {
             "encoding": "UTF8"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/inputs",
       "apiVersion": "2016-03-01",
       "name": "[concat(variables('asa_name_mfgasa'), '/mfgiothub')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]",
         "[concat('Microsoft.Devices/IotHubs/', variables('iot_hub_name_mfgiothub'))]"
       ],
       "properties": {
         "type": "Stream",
         "datasource": {
           "type": "Microsoft.Devices/IotHubs",
           "properties": {
             "iotHubNamespace": "[variables('iot_hub_name_mfgiothub')]",
             "sharedAccessPolicyName": "iothubowner",
             "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iot_hub_name_mfgiothub')), '2018-04-01').value[0].primaryKey]",
             "consumerGroupName": "$Default",
             "endpoint": "messages/events"
           }
         },
         "serialization": {
           "type": "Json",
           "properties": {
             "encoding": "UTF8"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/powerbi-lathe-peck-drill')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "PowerBI",
           "properties": {
             "dataset": "lathe-peck-drill-dataset",
             "table": "machine-streaming-table",
             "groupId": "[parameters('pbi_workspace_id')]",
             "authenticationMode": "Msi"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/powerbi-lathe-thread-out')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "PowerBI",
           "properties": {
             "dataset": "lathe-thread-out-dataset",
             "table": "machine-data",
             "groupId": "[parameters('pbi_workspace_id')]",
             "authenticationMode": "Msi"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/powerbi-milling-canning')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "PowerBI",
           "properties": {
             "dataset": "milling-canning",
             "table": "machine-data",
             "groupId": "[parameters('pbi_workspace_id')]",
             "authenticationMode": "Msi"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/synapse-lathe-peck-drill')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Sql/Server/Database",
           "properties": {
             "server": "[concat(variables('workspace_name_dreamdemosynapse'),'.database.windows.net')]",
             "database": "[variables('sql_compute_name')]",
             "user": "[variables('sql_administrator_login_id')]",
             "password": "[parameters('sql_administrator_login_password')]",
             "table": "mfg-iot-lathe-peck-drill"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/synapse-lathe-thread-cut')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Sql/Server/Database",
           "properties": {
             "server": "[concat(variables('workspace_name_dreamdemosynapse'),'.database.windows.net')]",
             "database": "[variables('sql_compute_name')]",
             "user": "[variables('sql_administrator_login_id')]",
             "password": "[parameters('sql_administrator_login_password')]",
             "table": "mfg-iot-lathe-thread-cut"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/synapse-mfgiotmillingcanning')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Sql/Server/Database",
           "properties": {
             "server": "[concat(variables('workspace_name_dreamdemosynapse'),'.database.windows.net')]",
             "database": "[variables('sql_compute_name')]",
             "user": "[variables('sql_administrator_login_id')]",
             "password": "[parameters('sql_administrator_login_password')]",
             "table": "mfgiotmillingcanning"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/synapse-milling-canning')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Sql/Server/Database",
           "properties": {
             "server": "[concat(variables('workspace_name_dreamdemosynapse'),'.database.windows.net')]",
             "database": "[variables('sql_compute_name')]",
             "user": "[variables('sql_administrator_login_id')]",
             "password": "[parameters('sql_administrator_login_password')]",
             "table": "mfg-iot-milling-canning"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/storage-lathe-peck-drill')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Storage/Blob",
           "properties": {
             "storageAccounts": [
               {
                 "accountName": "[variables('storage_account_name_dreamdemostorageforgen2')]",
                 "accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('storage_account_name_dreamdemostorageforgen2')),'2019-04-01').keys[0].value]"
               }
             ],
             "container": "mfgoutputs",
             "pathPattern": "iot-lathe-peck-drill/{datetime:yyyy}/{datetime:MM}/{datetime:dd}/"
           }
         },
         "serialization": {
           "type": "Json",
           "properties": {
             "encoding": "UTF8"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/storage-lathe-thread-cut')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Storage/Blob",
           "properties": {
             "storageAccounts": [
               {
                 "accountName": "[variables('storage_account_name_dreamdemostorageforgen2')]",
                 "accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('storage_account_name_dreamdemostorageforgen2')),'2019-04-01').keys[0].value]"
               }
             ],
             "container": "mfgoutputs",
             "pathPattern": "iot-lathe-thread-cut/{datetime:yyyy}/{datetime:MM}/{datetime:dd}/"
           }
         },
         "serialization": {
           "type": "Json",
           "properties": {
             "encoding": "UTF8"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasa'), '/storage-milling-canning')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Storage/Blob",
           "properties": {
             "storageAccounts": [
               {
                 "accountName": "[variables('storage_account_name_dreamdemostorageforgen2')]",
                 "accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('storage_account_name_dreamdemostorageforgen2')),'2019-04-01').keys[0].value]"
               }
             ],
             "container": "mfgoutputs",
             "pathPattern": "iot-milling-canning/{datetime:yyyy}/{datetime:MM}/{datetime:dd}/"
           }
         },
         "serialization": {
           "type": "Json",
           "properties": {
             "encoding": "UTF8"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/transformations",
       "apiVersion": "2016-03-01",
       "name": "[concat(variables('asa_name_mfgasa'), '/query')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "streamingUnits": 6,
         "query": "[variables('asa_query_mfgasa')]"
       }
     },
     {
       "name": "[concat(variables('asa_name_mfgasa'), '/removeIoTHubField')]",
       "type": "Microsoft.StreamAnalytics/streamingjobs/functions",
       "apiVersion": "2016-03-01",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasa'))]"
       ],
       "properties": {
         "type": "Scalar",
         "properties": {
           "inputs": [
             {
               "dataType": "record"
             }
           ],
           "output": {
             "dataType": "record"
           },
           "binding": {
             "type": "Microsoft.StreamAnalytics/JavascriptUdf",
             "properties": {
               "script": "function main(input) { delete input[\"IoTHub\"]; return input; }"
             }
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs",
       "apiVersion": "2019-06-01",
       "name": "[variables('asa_name_mfgasaCosmosDB')]",
       "dependsOn": [
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_industrial'))]",
         "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_mfgdemo'), variables('cosmos_database_name_mfgdemo_manufacturing'))]"
       ],
       "location": "northeurope",
       "identity": {
         "type": "SystemAssigned"
       },
       "properties": {
         "sku": {
           "name": "Standard"
         },
         "eventsOutOfOrderPolicy": "Adjust",
         "outputErrorPolicy": "Stop",
         "eventsOutOfOrderMaxDelayInSeconds": 0,
         "eventsLateArrivalMaxDelayInSeconds": 5,
         "dataLocale": "en-US"
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/inputs",
       "apiVersion": "2016-03-01",
       "name": "[concat(variables('asa_name_mfgasaCosmosDB'), '/mfgasaCosmosDB')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasaCosmosDB'))]",
         "[concat('Microsoft.Devices/IotHubs/', variables('iot_hub_name_mfgiothubCosmosDB'))]"
       ],
       "properties": {
         "type": "Stream",
         "datasource": {
           "type": "Microsoft.Devices/IotHubs",
           "properties": {
             "iotHubNamespace": "[variables('iot_hub_name_mfgiothubCosmosDB')]",
             "sharedAccessPolicyName": "iothubowner",
             "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iot_hub_name_mfgiothubCosmosDB')), '2018-04-01').value[0].primaryKey]",
             "consumerGroupName": "$Default",
             "endpoint": "messages/events"
           }
         },
         "serialization": {
           "type": "Json",
           "properties": {
             "encoding": "UTF8"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasaCosmosDB'), '/cosmosdboutput')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasaCosmosDB'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Storage/DocumentDB",
           "properties": {
             "accountId": "[variables('cosmos_account_name_mfgdemo')]",
             "accountKey": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_account_name_mfgdemo')), providers('Microsoft.DocumentDB', 'databaseAccounts').apiVersions[0]).primaryMasterKey]",
             "database": "[variables('cosmos_database_name_mfgdemo_manufacturing')]",
             "collectionNamePattern": "[variables('cosmos_database_container_name_manufacturing_data')]"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgasaCosmosDB'), '/CosmosdboutputNoHTAP')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasaCosmosDB'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Storage/DocumentDB",
           "properties": {
             "accountId": "[variables('cosmos_account_name_mfgdemo')]",
             "accountKey": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_account_name_mfgdemo')), providers('Microsoft.DocumentDB', 'databaseAccounts').apiVersions[0]).primaryMasterKey]",
             "database": "[variables('cosmos_database_name_mfgdemo_industrial')]",
             "collectionNamePattern": "[variables('cosmos_database_container_name_historical_data_adf')]"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/transformations",
       "apiVersion": "2016-03-01",
       "name": "[concat(variables('asa_name_mfgasaCosmosDB'), '/query')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgasaCosmosDB'))]"
       ],
       "properties": {
         "streamingUnits": 6,
         "query": "[variables('asa_query_mfgasaCosmosDB')]"
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs",
       "apiVersion": "2019-06-01",
       "name": "[variables('asa_name_mfgASATelemetry')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'))]"
       ],
       "location": "northeurope",
       "identity": {
         "type": "SystemAssigned"
       },
       "properties": {
         "sku": {
           "name": "Standard"
         },
         "eventsOutOfOrderPolicy": "Adjust",
         "outputErrorPolicy": "Stop",
         "eventsOutOfOrderMaxDelayInSeconds": 0,
         "eventsLateArrivalMaxDelayInSeconds": 5,
         "dataLocale": "en-US"
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/inputs",
       "apiVersion": "2016-03-01",
       "name": "[concat(variables('asa_name_mfgASATelemetry'), '/mfgIoTHubTelemetry-in')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgASATelemetry'))]",
         "[concat('Microsoft.Devices/IotHubs/', variables('iot_hub_name_mfgIotHubTelemetry'))]"
       ],
       "properties": {
         "type": "Stream",
         "datasource": {
           "type": "Microsoft.Devices/IotHubs",
           "properties": {
             "iotHubNamespace": "[variables('iot_hub_name_mfgIotHubTelemetry')]",
             "sharedAccessPolicyName": "iothubowner",
             "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iot_hub_name_mfgIotHubTelemetry')), '2018-04-01').value[0].primaryKey]",
             "consumerGroupName": "[variables('iot_hub_consumer_group_mfgIotHubTelemetry')]",
             "endpoint": "messages/events"
           }
         },
         "serialization": {
           "type": "Json",
           "properties": {
             "encoding": "UTF8"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_mfgASATelemetry'), '/mfgStorageTelemetry-out')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgASATelemetry'))]"
       ],
       "properties": {
         "datasource": {
           "type": "Microsoft.Storage/Blob",
           "properties": {
             "storageAccounts": [
               {
                 "accountName": "[variables('storage_account_name_dreamdemostorageforgen2')]",
                 "accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('storage_account_name_dreamdemostorageforgen2')),'2019-04-01').keys[0].value]"
               }
             ],
             "container": "mfgtelemetry",
             "pathPattern": "/{datetime:yyyy}/{datetime:MM}/{datetime:dd}/"
           }
         },
         "serialization": {
           "type": "Json",
           "properties": {
             "encoding": "UTF8"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/transformations",
       "apiVersion": "2016-03-01",
       "name": "[concat(variables('asa_name_mfgASATelemetry'), '/query')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_mfgASATelemetry'))]"
       ],
       "properties": {
         "streamingUnits": 6,
         "query": "[variables('asa_query_mfgASATelemetry')]"
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs",
       "apiVersion": "2019-06-01",
       "name": "[variables('asa_name_race_car_asa')]",
       "location": "northeurope",
       "identity": {
         "type": "SystemAssigned"
       },
       "properties": {
         "sku": {
           "name": "Standard"
         },
         "eventsOutOfOrderPolicy": "Adjust",
         "outputErrorPolicy": "Stop",
         "eventsOutOfOrderMaxDelayInSeconds": 0,
         "eventsLateArrivalMaxDelayInSeconds": 5,
         "dataLocale": "en-US"
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/inputs",
       "apiVersion": "2016-03-01",
       "name": "[concat(variables('asa_name_race_car_asa'), '/','race-car')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_race_car_asa'))]",
         "[concat('Microsoft.Devices/IotHubs/', variables('iot_hub_name_raceCarIotHub'))]"
       ],
       "properties": {
         "type": "Stream",
         "datasource": {
           "type": "Microsoft.Devices/IotHubs",
           "properties": {
             "iotHubNamespace": "[variables('iot_hub_name_raceCarIotHub')]",
             "sharedAccessPolicyName": "iothubowner",
             "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iot_hub_name_raceCarIotHub')), '2018-04-01').value[0].primaryKey]",
             "consumerGroupName": "$Default",
             "endpoint": "messages/events"
           }
         },
         "serialization": {
           "type": "Json",
           "properties": {
             "encoding": "UTF8"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
       "apiVersion": "2017-04-01-preview",
       "name": "[concat(variables('asa_name_race_car_asa'), '/power-bi')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_race_car_asa'))]"
       ],
       "properties": {
         "datasource": {
           "type": "PowerBI",
           "properties": {
             "dataset": "Racing Cars",
             "table": "race-cars",
             "groupId": "[parameters('pbi_workspace_id')]",
             "authenticationMode": "Msi"
           }
         }
       }
     },
     {
       "type": "Microsoft.StreamAnalytics/streamingjobs/transformations",
       "apiVersion": "2016-03-01",
       "name": "[concat(variables('asa_name_race_car_asa'), '/query')]",
       "dependsOn": [
         "[concat('Microsoft.StreamAnalytics/streamingjobs/', variables('asa_name_race_car_asa'))]"
       ],
       "properties": {
         "streamingUnits": 6,
         "query": "[variables('asa_query_race_car_asa')]"
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts",
       "apiVersion": "2019-04-01",
       "name": "[variables('storage_account_name_manufacturingdemo12')]",
       "location": "[variables('location')]",
       "sku": {
         "name": "Standard_LRS"
       },
       "kind": "StorageV2",
       "properties": {
         "accessTier": "Hot",
         "supportsHttpsTrafficOnly": "true",
         "isHnsEnabled": "true",
         "largeFileSharesState": "Disabled"
       },
       "resources": [
         {
           "type": "blobServices/containers",
           "apiVersion": "2018-07-01",
           "name": "[concat('default/data')]",
           "dependsOn": [
             "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name_manufacturingdemo12'))]"
           ]
         }
       ]
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_manufacturingdemo12'), '/default')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_manufacturingdemo12'))]"
       ],
       "sku": {
         "name": "Standard_LRS",
         "tier": "Standard"
       },
       "properties": {
         "cors": {
           "corsRules": [
 
           ]
         },
         "deleteRetentionPolicy": {
           "enabled": false
         }
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/fileServices",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_manufacturingdemo12'), '/default')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_manufacturingdemo12'))]"
       ],
       "sku": {
         "name": "Standard_LRS",
         "tier": "Standard"
       },
       "properties": {
         "cors": {
           "corsRules": [
 
           ]
         }
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts",
       "apiVersion": "2019-04-01",
       "name": "[variables('storage_account_name_manufacturingdemoassets')]",
       "location": "[variables('location')]",
       "sku": {
         "name": "Standard_LRS"
       },
       "kind": "StorageV2",
       "properties": {
         "accessTier": "Hot",
         "supportsHttpsTrafficOnly": "true",
         "isHnsEnabled": "true",
         "largeFileSharesState": "Disabled"
       },
       "resources": [
         {
           "type": "blobServices/containers",
           "apiVersion": "2018-07-01",
           "name": "[concat('default/data')]",
           "dependsOn": [
             "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name_manufacturingdemoassets'))]"
           ]
         }
       ]
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_manufacturingdemoassets'), '/default')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_manufacturingdemoassets'))]"
       ],
       "sku": {
         "name": "Standard_LRS",
         "tier": "Standard"
       },
       "properties": {
         "cors": {
           "corsRules": [
 
           ]
         },
         "deleteRetentionPolicy": {
           "enabled": false
         }
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/fileServices",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_manufacturingdemoassets'), '/default')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_manufacturingdemoassets'))]"
       ],
       "sku": {
         "name": "Standard_LRS",
         "tier": "Standard"
       },
       "properties": {
         "cors": {
           "corsRules": [
 
           ]
         }
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts",
       "apiVersion": "2019-04-01",
       "name": "[variables('storage_account_name_manufacturingwebstaging')]",
       "location": "[variables('location')]",
       "sku": {
         "name": "Standard_LRS"
       },
       "kind": "StorageV2",
       "properties": {
         "accessTier": "Hot",
         "supportsHttpsTrafficOnly": "true",
         "isHnsEnabled": "true",
         "largeFileSharesState": "Disabled"
       },
       "resources": [
         {
           "type": "blobServices/containers",
           "apiVersion": "2018-07-01",
           "name": "[concat('default/data')]",
           "dependsOn": [
             "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name_manufacturingwebstaging'))]"
           ]
         }
       ]
     },
     {
       "type": "Microsoft.Storage/storageAccounts/blobServices",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_manufacturingwebstaging'), '/default')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_manufacturingwebstaging'))]"
       ],
       "sku": {
         "name": "Standard_LRS",
         "tier": "Standard"
       },
       "properties": {
         "cors": {
           "corsRules": [
 
           ]
         },
         "deleteRetentionPolicy": {
           "enabled": false
         }
       }
     },
     {
       "type": "Microsoft.Storage/storageAccounts/fileServices",
       "apiVersion": "2019-06-01",
       "name": "[concat(variables('storage_account_name_manufacturingwebstaging'), '/default')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_manufacturingwebstaging'))]"
       ],
       "sku": {
         "name": "Standard_LRS",
         "tier": "Standard"
       },
       "properties": {
         "cors": {
           "corsRules": [
 
           ]
         }
       }
     },
     {
       "type": "Microsoft.Synapse/workspaces",
       "apiVersion": "2019-06-01-preview",
       "name": "[variables('workspace_name_dreamdemosynapse')]",
       "location": "[variables('location')]",
       "dependsOn": [
         "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name_dreamdemostorageforgen2'), '/blobServices/default/containers/', variables('default_data_lake_storage_file_system_name'))]"
       ],
       "identity": {
         "type": "SystemAssigned"
       },
       "properties": {
         "defaultDataLakeStorage": {
           "accountUrl": "[variables('default_data_lake_storage_account_url')]",
           "filesystem": "[variables('default_data_lake_storage_file_system_name')]"
         },
         "sqlAdministratorLogin": "[variables('sql_administrator_login_id')]",
         "sqlAdministratorLoginPassword": "[parameters('sql_administrator_login_password')]"
       },
       "resources": [
         {
           "type": "firewallrules",
           "apiVersion": "2019-06-01-preview",
           "name": "allowAll",
           "location": "[variables('location')]",
           "dependsOn": [
             "[concat('Microsoft.Synapse/workspaces/', variables('workspace_name_dreamdemosynapse'))]"
           ],
           "properties": {
             "startIpAddress": "0.0.0.0",
             "endIpAddress": "255.255.255.255"
           }
         }
       ]
     },
     {
       "type": "Microsoft.Synapse/workspaces/bigDataPools",
       "apiVersion": "2019-06-01-preview",
       "name": "[concat(variables('workspace_name_dreamdemosynapse'), '/', variables('spark_compute_name'))]",
       "location": "[variables('location')]",
       "dependsOn": [
         "[resourceId('Microsoft.Synapse/workspaces', variables('workspace_name_dreamdemosynapse'))]"
       ],
       "properties": {
         "nodeCount": "[variables('spark_node_count')]",
         "nodeSizeFamily": "[variables('spark_node_size_family')]",
         "nodeSize": "[variables('spark_node_size')]",
         "autoScale": {
           "enabled": "[variables('spark_auto_scale_enabled')]",
           "minNodeCount": "[variables('spark_min_node_count')]",
           "maxNodeCount": "[variables('spark_max_node_count')]"
         },
         "autoPause": {
           "enabled": "[variables('spark_auto_pause_enabled')]",
           "delayInMinutes": "[variables('spark_auto_pause_delay_in_minutes')]"
         },
         "sparkVersion": "[variables('spark_version')]",
         "libraryRequirements": {
           "filename": "[variables('packages_requirements_file_name')]",
           "content": "[variables('packages_requirements_content')]"
         }
       }
     },
     {
       "type": "Microsoft.Synapse/workspaces/sqlPools",
       "apiVersion": "2019-06-01-preview",
       "name": "[concat(variables('workspace_name_dreamdemosynapse'), '/', variables('sql_compute_name'))]",
       "location": "[variables('location')]",
       "dependsOn": [
         "[concat('Microsoft.Synapse/workspaces/', variables('workspace_name_dreamdemosynapse'))]",
         "[concat('Microsoft.Synapse/workspaces/', variables('workspace_name_dreamdemosynapse'), '/bigDataPools/', variables('spark_compute_name'))]"
       ],
       "sku": {
         "name": "[variables('sql_server_sku')]"
       },
       "properties": {
         "createMode": "Default",
         "collation": "SQL_Latin1_General_CP1_CI_AS"
       }
     },
     {
       "name": "[variables('manufacturing_poc_ase_name')]",
       "type": "Microsoft.Web/serverfarms",
       "apiVersion": "2019-08-01",
       "kind": "app",
       "location": "[variables('location')]",
       "properties": {
         "name": "[variables('manufacturing_poc_ase_name')]"
       },
       "sku": {
         "name": "S1"
       }
     },
     {
       "name": "[variables('manufacturing_poc_ai_name')]",
       "type": "Microsoft.Insights/components",
       "apiVersion": "2018-05-01-preview",
       "location": "[variables('location')]",
       "properties": {
         "Application_Type": "web",
         "Flow_Type": "Bluefield",
         "Request_Source": "rest"
       }
     },
     {
       "name": "[variables('manufacturing_poc_app_service_name')]",
       "type": "Microsoft.Web/sites",
       "apiVersion": "2018-11-01",
       "kind": "app",
       "location": "[variables('location')]",
       "dependsOn": [
         "[concat('Microsoft.Insights/components/', toLower(variables('manufacturing_poc_ai_name')))]",
         "[concat('Microsoft.Web/serverfarms/', toLower(variables('manufacturing_poc_ase_name')))]"
       ],
       "properties": {
         "enabled": true,
         "hostNameSslStates": [
           {
             "name": "[concat(variables('manufacturing_poc_app_service_name'), '.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Standard"
           },
           {
             "name": "[concat(variables('manufacturing_poc_app_service_name'), '.scm.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Repository"
           }
         ],
         "serverFarmId": "[resourceId(variables('resource_group_name'),'Microsoft.Web/serverfarms', variables('manufacturing_poc_ase_name'))]",
         "siteConfig": {
           "appSettings": [
             {
               "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
               "value": "~2",
               "slotSetting": false
             },
             {
               "name": "DiagnosticServices_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "InstrumentationEngine_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "SnapshotDebugger_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_Mode",
               "value": "recommended",
               "slotSetting": false
             },
             {
               "name": "AppInsights_Instrumentation_Key",
               "value": "[reference(resourceId('Microsoft.Insights/components', variables('manufacturing_poc_ai_name'))).InstrumentationKey]",
               "slotSetting": false
             }
           ],
           "use32BitWorkerProcess": true,
           "alwaysOn": true,
           "managedPipelineMode": "Integrated"
         }
       }
     },
     {
       "name": "[variables('wideworldimporters_ase_name')]",
       "type": "Microsoft.Web/serverfarms",
       "apiVersion": "2019-08-01",
       "kind": "app",
       "location": "[variables('location')]",
       "properties": {
         "name": "[variables('wideworldimporters_ase_name')]"
       },
       "sku": {
         "name": "S1"
       }
     },
     {
       "name": "[variables('wideworldimporters_ai_name')]",
       "type": "Microsoft.Insights/components",
       "apiVersion": "2018-05-01-preview",
       "location": "[variables('location')]",
       "properties": {
         "Application_Type": "web",
         "Flow_Type": "Bluefield",
         "Request_Source": "rest"
       }
     },
     {
       "name": "[variables('wideworldimporters_app_service_name')]",
       "type": "Microsoft.Web/sites",
       "apiVersion": "2018-11-01",
       "kind": "app",
       "location": "[variables('location')]",
       "dependsOn": [
         "[concat('Microsoft.Insights/components/', toLower(variables('wideworldimporters_ai_name')))]",
         "[concat('Microsoft.Web/serverfarms/', toLower(variables('wideworldimporters_ase_name')))]"
       ],
       "properties": {
         "enabled": true,
         "hostNameSslStates": [
           {
             "name": "[concat(variables('wideworldimporters_app_service_name'), '.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Standard"
           },
           {
             "name": "[concat(variables('wideworldimporters_app_service_name'), '.scm.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Repository"
           }
         ],
         "serverFarmId": "[resourceId(variables('resource_group_name'),'Microsoft.Web/serverfarms', variables('wideworldimporters_ase_name'))]",
         "siteConfig": {
           "appSettings": [
             {
               "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
               "value": "~2",
               "slotSetting": false
             },
             {
               "name": "DiagnosticServices_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "InstrumentationEngine_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "SnapshotDebugger_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_Mode",
               "value": "recommended",
               "slotSetting": false
             },
             {
               "name": "AppInsights_Instrumentation_Key",
               "value": "[reference(resourceId('Microsoft.Insights/components', variables('wideworldimporters_ai_name'))).InstrumentationKey]",
               "slotSetting": false
             }
           ],
           "use32BitWorkerProcess": true,
           "alwaysOn": true,
           "managedPipelineMode": "Integrated"
         }
       }
     },
     {
       "name": "[variables('car_telemetry_ase_name')]",
       "type": "Microsoft.Web/serverfarms",
       "apiVersion": "2019-08-01",
       "kind": "app",
       "location": "[variables('location')]",
       "properties": {
         "name": "[variables('car_telemetry_ase_name')]"
       },
       "sku": {
         "name": "S1"
       }
     },
     {
       "name": "[variables('car_telemetry_ai_name')]",
       "type": "Microsoft.Insights/components",
       "apiVersion": "2018-05-01-preview",
       "location": "[variables('location')]",
       "properties": {
         "Application_Type": "web",
         "Flow_Type": "Bluefield",
         "Request_Source": "rest"
       }
     },
     {
       "name": "[variables('car_telemetry_app_service_name')]",
       "type": "Microsoft.Web/sites",
       "apiVersion": "2018-11-01",
       "kind": "app",
       "location": "[variables('location')]",
       "dependsOn": [
         "[concat('Microsoft.Insights/components/', toLower(variables('car_telemetry_ai_name')))]",
         "[concat('Microsoft.Web/serverfarms/', toLower(variables('car_telemetry_ase_name')))]"
       ],
       "properties": {
         "enabled": true,
         "hostNameSslStates": [
           {
             "name": "[concat(variables('car_telemetry_app_service_name'), '.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Standard"
           },
           {
             "name": "[concat(variables('car_telemetry_app_service_name'), '.scm.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Repository"
           }
         ],
         "serverFarmId": "[resourceId(variables('resource_group_name'),'Microsoft.Web/serverfarms', variables('car_telemetry_ase_name'))]",
         "siteConfig": {
           "appSettings": [
             {
               "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
               "value": "~2",
               "slotSetting": false
             },
             {
               "name": "DiagnosticServices_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "InstrumentationEngine_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "SnapshotDebugger_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_Mode",
               "value": "recommended",
               "slotSetting": false
             },
             {
               "name": "AppInsights_Instrumentation_Key",
               "value": "[reference(resourceId('Microsoft.Insights/components', variables('car_telemetry_ai_name'))).InstrumentationKey]",
               "slotSetting": false
             }
           ],
           "use32BitWorkerProcess": true,
           "alwaysOn": true,
           "managedPipelineMode": "Integrated"
         }
       }
     },
     {
       "name": "[variables('sendtohub_telemetry_ase_name')]",
       "type": "Microsoft.Web/serverfarms",
       "apiVersion": "2019-08-01",
       "kind": "app",
       "location": "[variables('location')]",
       "properties": {
         "name": "[variables('sendtohub_telemetry_ase_name')]"
       },
       "sku": {
         "name": "S1"
       }
     },
     {
       "name": "[variables('sendtohub_telemetry_ai_name')]",
       "type": "Microsoft.Insights/components",
       "apiVersion": "2018-05-01-preview",
       "location": "[variables('location')]",
       "properties": {
         "Application_Type": "web",
         "Flow_Type": "Bluefield",
         "Request_Source": "rest"
       }
     },
     {
       "name": "[variables('sendtohub_telemetry_app_service_name')]",
       "type": "Microsoft.Web/sites",
       "apiVersion": "2018-11-01",
       "kind": "app",
       "location": "[variables('location')]",
       "dependsOn": [
         "[concat('Microsoft.Insights/components/', toLower(variables('sendtohub_telemetry_ai_name')))]",
         "[concat('Microsoft.Web/serverfarms/', toLower(variables('sendtohub_telemetry_ase_name')))]"
       ],
       "properties": {
         "enabled": true,
         "hostNameSslStates": [
           {
             "name": "[concat(variables('sendtohub_telemetry_app_service_name'), '.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Standard"
           },
           {
             "name": "[concat(variables('sendtohub_telemetry_app_service_name'), '.scm.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Repository"
           }
         ],
         "serverFarmId": "[resourceId(variables('resource_group_name'),'Microsoft.Web/serverfarms', variables('sendtohub_telemetry_ase_name'))]",
         "siteConfig": {
           "appSettings": [
             {
               "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
               "value": "~2",
               "slotSetting": false
             },
             {
               "name": "DiagnosticServices_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "InstrumentationEngine_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "SnapshotDebugger_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_Mode",
               "value": "recommended",
               "slotSetting": false
             },
             {
               "name": "AppInsights_Instrumentation_Key",
               "value": "[reference(resourceId('Microsoft.Insights/components', variables('sendtohub_telemetry_ai_name'))).InstrumentationKey]",
               "slotSetting": false
             }
           ],
           "use32BitWorkerProcess": true,
           "alwaysOn": true,
           "managedPipelineMode": "Integrated"
         }
       }
     },
     {
       "name": "[variables('sku2_telemetry_ase_name')]",
       "type": "Microsoft.Web/serverfarms",
       "apiVersion": "2019-08-01",
       "kind": "app",
       "location": "[variables('location')]",
       "properties": {
         "name": "[variables('sku2_telemetry_ase_name')]"
       },
       "sku": {
         "name": "S1"
       }
     },
     {
       "name": "[variables('sku2_telemetry_ai_name')]",
       "type": "Microsoft.Insights/components",
       "apiVersion": "2018-05-01-preview",
       "location": "[variables('location')]",
       "properties": {
         "Application_Type": "web",
         "Flow_Type": "Bluefield",
         "Request_Source": "rest"
       }
     },
     {
       "name": "[variables('sku2_telemetry_app_service_name')]",
       "type": "Microsoft.Web/sites",
       "apiVersion": "2018-11-01",
       "kind": "app",
       "location": "[variables('location')]",
       "dependsOn": [
         "[concat('Microsoft.Insights/components/', toLower(variables('sku2_telemetry_ai_name')))]",
         "[concat('Microsoft.Web/serverfarms/', toLower(variables('sku2_telemetry_ase_name')))]"
       ],
       "properties": {
         "enabled": true,
         "hostNameSslStates": [
           {
             "name": "[concat(variables('sku2_telemetry_app_service_name'), '.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Standard"
           },
           {
             "name": "[concat(variables('sku2_telemetry_app_service_name'), '.scm.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Repository"
           }
         ],
         "serverFarmId": "[resourceId(variables('resource_group_name'),'Microsoft.Web/serverfarms', variables('sku2_telemetry_ase_name'))]",
         "siteConfig": {
           "appSettings": [
             {
               "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
               "value": "~2",
               "slotSetting": false
             },
             {
               "name": "DiagnosticServices_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "InstrumentationEngine_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "SnapshotDebugger_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_Mode",
               "value": "recommended",
               "slotSetting": false
             },
             {
               "name": "AppInsights_Instrumentation_Key",
               "value": "[reference(resourceId('Microsoft.Insights/components', variables('sku2_telemetry_ai_name'))).InstrumentationKey]",
               "slotSetting": false
             }
           ],
           "use32BitWorkerProcess": true,
           "alwaysOn": true,
           "managedPipelineMode": "Integrated"
         }
       }
     },
     {
       "name": "[variables('data_gen_telemetry_ase_name')]",
       "type": "Microsoft.Web/serverfarms",
       "apiVersion": "2019-08-01",
       "kind": "app",
       "location": "[variables('location')]",
       "properties": {
         "name": "[variables('data_gen_telemetry_ase_name')]"
       },
       "sku": {
         "name": "S1"
       }
     },
     {
       "name": "[variables('data_gen_telemetry_ai_name')]",
       "type": "Microsoft.Insights/components",
       "apiVersion": "2018-05-01-preview",
       "location": "[variables('location')]",
       "properties": {
         "Application_Type": "web",
         "Flow_Type": "Bluefield",
         "Request_Source": "rest"
       }
     },
     {
       "name": "[variables('data_gen_telemetry_app_service_name')]",
       "type": "Microsoft.Web/sites",
       "apiVersion": "2018-11-01",
       "kind": "app",
       "location": "[variables('location')]",
       "dependsOn": [
         "[concat('Microsoft.Insights/components/', toLower(variables('data_gen_telemetry_ai_name')))]",
         "[concat('Microsoft.Web/serverfarms/', toLower(variables('data_gen_telemetry_ase_name')))]"
       ],
       "properties": {
         "enabled": true,
         "hostNameSslStates": [
           {
             "name": "[concat(variables('data_gen_telemetry_app_service_name'), '.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Standard"
           },
           {
             "name": "[concat(variables('data_gen_telemetry_app_service_name'), '.scm.azurewebsites.net')]",
             "sslState": "Disabled",
             "hostType": "Repository"
           }
         ],
         "serverFarmId": "[resourceId(variables('resource_group_name'),'Microsoft.Web/serverfarms', variables('data_gen_telemetry_ase_name'))]",
         "siteConfig": {
           "appSettings": [
             {
               "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
               "value": "~2",
               "slotSetting": false
             },
             {
               "name": "DiagnosticServices_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "InstrumentationEngine_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "SnapshotDebugger_EXTENSION_VERSION",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
               "value": "disabled",
               "slotSetting": false
             },
             {
               "name": "XDT_MicrosoftApplicationInsights_Mode",
               "value": "recommended",
               "slotSetting": false
             },
             {
               "name": "AppInsights_Instrumentation_Key",
               "value": "[reference(resourceId('Microsoft.Insights/components', variables('data_gen_telemetry_ai_name'))).InstrumentationKey]",
               "slotSetting": false
             }
           ],
           "use32BitWorkerProcess": true,
           "alwaysOn": true,
           "managedPipelineMode": "Integrated"
         }
       }
     },
     {
       "type": "Microsoft.Search/searchServices",
       "apiVersion": "2020-03-13",
       "name": "[variables('search_name')]",
       "location": "[variables('location')]",
       "sku": {
         "name": "standard"
       },
       "properties": {
         "replicaCount": 1,
         "partitionCount": 1,
         "hostingMode": "Default",
         "publicNetworkAccess": "Enabled",
         "networkRuleSet": {
           "ipRules": []
         }
       }
     },
	 {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('key_vault_name')]",
      "apiVersion": "2018-02-14",
      "location": "[variables('location')]",
      "properties": {
        "enabledForDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          
        ],
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "networkAcls": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('key_vault_name'), '/SqlPassword')]",
      "apiVersion": "2018-02-14",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
      ],
      "properties": {
        "value": "[parameters('sql_administrator_login_password')]"
      }
    }
   ]
 ,
    "outputs":{
       
    }
 }
